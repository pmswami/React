React
    Open source JS library for building UI
    JS library, not framework
    Rich ecosystem
    Created and manintained by Facebook
    Huge community
    In-demand Skillset
    Component Based Architecture
    Reusable code
    Declarative Language, not imperative Language
    React handle efficiently updating and rendering of the components.
    DOM updates are handled gracefully in React.

Why React?
    Seamlessly integrate Recat into any of your application.
    Portion of your page or a completed page or even an entire application itself.
    React native for mobile applications.

Creating New Project
    Way 1: npx
            npx create-react-app hellow-world
    Way 2: npm
            installing new package
                npm install create-react-app -g
            create-react-app hello-world
    
Components
    Root(generally App Component) component contains all other components from the Application.
    Components are re-usable and can be nested inside other components.
    Types-
        1. Stateless Functional Components.
        2. Stateful Class Components.

Functional Components
    Receives properties (props)
    Returns HTML(JSX)
    Basically normal JS Function 
    Named exports of components possible; then import of such components should have same name as component name

Class Components
    Can received props optionally
    Contains internal state as well
    return JSX

Advantages of Components 
            Functional Component                            
        Simple Functions
        Use Func components as much as possible
        Absence of this keyword
        Solution without using state
        Stateless/Dumb/Presentational Components

            Class Components
        More feature Rich
        Maintain their own private data - state
        Complex UI Login
        Provide lifecycle hooks
        Stateful/Smart/Container

JSX
    JSX => JavaScript XML, extension to JavaScript language syntax
    Write XML like code for elements and components
    JSX tags have name, attributes and children
    JSX is not a necessity to write React applications.
    JSX makes your react code simpler and elegant.
    JSX ultimately transpiles to pure JavaScript which is understood by the browsers.
    JSX Differences
        class => className
        for => htmlFor
        onclick => onClick
        tabindex => tanIndex

Props vs state
        Props
    props gets passed to the component
    Functional parameters
    props are immutable by children components.
    In functional components => props
    In Class Components =? this.props

        state
    State is managed withing the component
    Variables declared in the function body
    State can be changed
    In Functional Components => useState Hook.
    In Class Components => this.state
    setState methods are async by default. It accept a callback function which can be executed after execution of setState completed.
    Always make use of setState and never modify the state directly
    Code has to be executed after the state has been updated? Place the code in the callback function which is the second argumnet to the setState method.
    When you have to update state based on the previous state value, pass in a function as an argument instead of the regular object.
    
Conditional Rendering
    1. if/else.
    2. Element Variables.
    3. Ternary Conditional Operator.
    4. Short Circuit Operator.

prop "key" is unique and reserved. It cannot be accessed withing child components.
React uses key to match list elements within new list and old list.
If keys are passed then React updates the list the efficiently, otherwise React performance decreases.
Generally index of element of list is used as keys. But you can use any other parameter which is unique.

When to use index as a key?
    1. The items in the list do not have a unique id.
    2. The list is a static list and will not change.
    3. The list will never be reordered or filtered.

Styling React Components
    1. CSS Stylesheets
    2. Inline Styling
    3. CSS Modules
    4. CSS in JS Libraries (Styled Components)

    Styles in modules do not propogate to children of a components whereas styles from css file do propogate to children components.

Controlled Components

Lifecycle Methods (applicable only to class components)
    Phase 1 => Mounting
        When an instance of a component is being created and inserted into the DOM.
        Four methods available =>
            1. constructor => 
                A special function that will get called whenever a new component is created
                Used to -
                    Initialize states.
                    Bindinmg the event Handlers.
                Do not cause side effects for eg.,HTTP requests
                Always call super(props)
                Directly overwrite this.state
            2. static getDerivedStateFromProps =>
                When the state of the component depends on changes in props over time
                Rarely used lifecycle method
                Since static method, does not have access to this keyword
                Do not cause side effects for eg., HTTP requests
            3. render =>
                Only required method
                Read props and state and return JSX
                Do not change state or interact with DOM or make AJAX calls.
                Children component lifecycle methods are also executed.
            4. componentDidMount =>
                Invoked immediately after a component and all its children components have been rendered to the DOM.
                Cause side effects. Ex., Interact with the DOM or perform any AJAX calls to the load data.
    Phase 2 => Updating
        When component is being re-rendered as a result of changes to either its props or state
        Five method available =>
            1. static getDerivedStateFromProps =>
                Method is called every time a component is re-rendered.
                Set the state.
                Do not cause side effects. for eg., HTTP requests.
                Rarely used method in updating phase.
            2. ShouldComponentUpdate =>
                By default, all component will re-render after props/state changes.
                Can return false to prevent updating.
                Dictates if the component should re-render or not.
                Performance Optimization.
                Do not cause side effects. For eg., HTTP requests, calling the setState method.
            3. render =>
                Only required method
                Read props and state and return JSX.
                Do not change state or interact with DOM or make AJAX calls.
            4. getSnapshotBeforeUpdate =>
                Called right before the changes from the virtual DOM. are to be reflected in the DOM.
                Capture some information from the DOM.
                Method will either return null or return a value. Returned value will be passed as third parameter to the next method.
            5. componentDidUpdate =>
                Called after the render is finished in the re-render cycles.
                Cuase side-effects. 
                Make AJAX calls.
    Phase 3 => Unmounting
        When is being removed from the DOM
        One method available =>
            1. componentWillUnmount => 
                Method is invoked immediately before a component is unmounted and destroyed.
                Cancelling any network requests, removing event handlers, cancelling any subscriptions and also invalidating timers.
                Do not call the setState method.
                Perform necessary cleanup in here
    Phase 4 => Error Handling
        When there is an error during rendering, in a lifecycle method,
        or in the constructor of any child components.
        Two methods available
            1. static getDerivedStateFromError
            2. componentDidCatch

Fragments =>
    React Fragments lets you add elements without adding an extra node to the DOM.
    Syntax, <React.Fragment></React.Fragment> OR <></>

Regular Components =>
    A regular component does not implement thye shouldComponentUpdate method.
    It always returns true by default.

Pure Component =>
    A pure component on the other hand implements shouldComponentUpdate with a shallow props and state comparison.
    Shallow comparision of primitive objects is true only when both objects have same value and are of same type.
    Shallow copy of complex objects is true only if both objects have same location of storage.

If parent component does not re-render then all its children component doesnot re-render.
PureComponents does not re-render if there is no change in states/props.
Pure Components provide performance boost by refarining from re-rendering.
React.memo in functional components provides same functionality as PureComponent in class based components.

React Refs =>
    Allows us to create a reference to underlying DOM elements.
    Refs cannot be attached to fucntional components.
    Refs can only be attached to class components.
    Refs can be passed to parent components.

Portals =>
    Used to create a components which are not part to root element.
    Whenever an event is created inside a portal, event-bbubling is supported, they can be catched withing their parent element/component.

Error Boundary =>
    A class component that implements either one or both of the lifecycle methods getDerivedStateFromError or componentDidCatch becomes an error boundary.
    The static getDerivedStateFromError method is used to render a fallback UI after an error is thrown.
    The componentDidCatch method is used to log the error information. In development enviroment, by default, React logs each and every error to console. But this might be useful only production enviroments.
    Error boundaries catch errors in, component rendering/updation, lifecycle methods, in constructors only. However, errors inside event handlers are not being caught by these error boundary. They can be only handled using traditional try-catch method.
    Error boundaries are React components that catch JavaScript erro in their child components tree, log those error and display a fall-back UI.
    A class component becomes an Error Boundary by defining either or both of getDerivedStateFromError and componentDidCatch lifecycle methods.
    The placement of the Error Boundary also matters as it controls if the entire app should have the fall-back UI or just the component causing the problem.
    Provide a way to gracefully handle error in application code.

Higher Order Components =>
    To share common functionality between different components without duplicating the code.
    A pattern where a function takes a component as an argument and returns a new component.
    Similar to Higher order functions in Python.

Context =>
    Context Provides a way to pass the datat through the component tree without having to pass props down manually at entry level.
    It contain, Context Provider and Context Consumer. Context Provider provides the context with values. Context consumer uses the value whenever required.
    If context provider is not defined then context consumer uses default value of the context. This default value can be defined while creating the context.

Hooks =>
    Works only on functions
    Dont work inside Classes.
    Allows to use React feature without class.
    Allows re-use of stateful logic.
    
Why Hooks ?
    No need of classes
    Easier to share code logics between components.

Rules of Hook
    Only call Hooks at the Top level, DOnt call Hooks inside loops, conditions or nested functions.
    Only call Hooks from React Functions, Call them from withing React functional components and not just any regular JavaScript function.
    In useState hook, while updating objects in useState hook, setter function do not copy remaining fields as it is, it only sets updated field and removes all other. In class based state variables, setters will udate all others including updating field.

    useState =>
        It lets you add state to functional components.
        In classes, the state is always an object.
        With the useState Hook, the state doesnt have to be an object.
        The useState hook returns an array with 2 elements. The first element is the current value of the state and second element is a state setter function.
        New State value depends on the previous state value? You can pass a function to the setter function.
        When dealing with bonbjects or arrays, always make sure to spread your state variable and then call the setter function.
    useEffect =>
        The useEffect Hook lets you perform side effects in a fucntional components.
        It is close replacement for componentDidMount, componentDidUpdate, componentWillUnmount lifecycle methods.
        useEffect takes array as second argument, this is list of variables on which we want to re-render the component.
        If we pass [] as second argument to useEffect, then it re-renders the component only once. If we dont pass second argument, then it by default, re-renders every time component is updated.
        For cleanup code, useEffect can return a function which can be used to run these cleanup codes.
        Always try to declare dependencies inside useEffect only. This will remove the common error/mistake.
    useContext =>
        Context provides a way to pass data through the components tree without having to pass props down manually at entry level.
    userReducer =>
        useReducer is a hook that is used for state management.
        It is an alternative to useState.
        Returns [newState, dispatch]
        useReducer uses reducer functions.
        